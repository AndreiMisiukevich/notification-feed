!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.app=t():e.app=t()}(window,function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([,function(e,t){const n=new URLSearchParams(window.location.search).get("search"),o={displayLength:5e3,inDuration:400,outDuration:200,activationPercent:1,classes:"toast-customization"},i=({message:e,name:t,url:n,image:o})=>'\n<div style="display: flex; flex-direction: row; justify-content: flex-start; align-items: flex-start; width: 100%;">\n  <div style="margin: 5px; padding: 5px; width: 75px;">\n    <img width="60px" src="'.concat(o,'" alt="" class="circle responsive">\n  </div>\n  <div style="opacity: 1.0; display: flex; flex-direction: column; justify-content: center; align-items: center; width: 100%; color: white;" class="vvv">\n    <div style="font-size:14px; font-weight:700; font-family:Comic Sans MS, cursive, sans-serif; display: flex; align-items: center; justify-content: center;">\n      <a style="color: white; padding: 3px; margin: 3px;" href="').concat(n,'" target="_blank">').concat(t,'</a>\n    </div>\n    <div style="height: 50px; line-height: 1.2; display: flex; justify-content: center; margin-right: 3px;">\n      <span style="font-size:10px; font-weight:300; font-family:Lucida Console, Monaco, monospace; overflow: hidden; text-overflow: ellipsis;">\n        ').concat(e,"\n      </span>\n    </div>\n  </div>\n</div>\n");window.createToast=(({message:e,name:t,url:n,image:r})=>M.toast({...o,html:i({message:e,name:t,url:n,image:r})})),new WebSocket("ws://localhost:3000/stream?search=".concat(n)).onmessage=function(e){const t=JSON.parse(e.data);window.createToast(t)}}])});